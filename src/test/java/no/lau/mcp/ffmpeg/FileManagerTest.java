package no.lau.mcp.ffmpeg;

import no.lau.mcp.file.FileManager;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Map;

public class FileManagerTest {
    public static void main(String[] args) {
        try {
            //String userHome = System.getProperty("user.home");
            String userHome = "/tmp";
            String sourcePath = Paths.get(userHome, "vids", "exampleSourceFolder").toString();
            String destPath = Paths.get(userHome, "vids", "exampleDestFolder").toString();

            System.err.println("Test Source Path: " + sourcePath);
            System.err.println("Test Destination Path: " + destPath);

            FileManager fm = new FileManager(sourcePath, destPath);

            Path sourceDir = Paths.get(sourcePath);
            Path file1 = sourceDir.resolve("file1.txt");
            Path file2 = sourceDir.resolve("file2.docx");

            Files.deleteIfExists(file1); // Clean up previous runs
            Files.deleteIfExists(file2); // Clean up previous runs

            Files.writeString(file1, "Hello File1", StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
            Files.writeString(file2, "Hello File2", StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);
            file1.toFile().deleteOnExit();
            file2.toFile().deleteOnExit();

            Map<String, Path> filesMap = fm.listFilesWithGeneratedKeys();
            System.err.println("\nFiles in source folder (" + fm.sourceFolder + ") with generated IDs:");
            filesMap.forEach((id, path) -> System.err.println("ID: " + id + ", Path: " + path));

            // 2. Create a new file in the destination folder with an auto-generated name
            Path newFileAutoName = fm.createNewFileWithAutoGeneratedNameInSecondFolder();
            System.err.println("\nCreated new file with auto-generated name: " + newFileAutoName);
            if (Files.exists(newFileAutoName)) {
                System.err.println("Verification: Auto-named file exists.");
                Files.writeString(newFileAutoName, "This file has an auto-generated name.", StandardOpenOption.WRITE);
                newFileAutoName.toFile().deleteOnExit();
            }

            // 2b. Create a new file with an auto-generated name and custom extension
            Path newFileCustomExt = fm.createNewFileWithAutoGeneratedNameInSecondFolder(".log");
            System.err.println("\nCreated new file with auto-generated name and custom extension: " + newFileCustomExt);
            if (Files.exists(newFileCustomExt)) {
                System.err.println("Verification: Auto-named file with custom extension exists.");
                Files.writeString(newFileCustomExt, "This is a log file.", StandardOpenOption.WRITE);
                newFileCustomExt.toFile().deleteOnExit();
            }

            // Test invalid extension
            System.err.println("\nAttempting to create file with invalid custom extension:");
            try {
                fm.createNewFileWithAutoGeneratedNameInSecondFolder("txt"); // Missing dot
            } catch (IllegalArgumentException e) {
                System.err.println("Successfully caught: " + e.getMessage());
            }
            try {
                fm.createNewFileWithAutoGeneratedNameInSecondFolder(".txt/bad"); // Invalid chars
            } catch (IllegalArgumentException e) {
                System.err.println("Successfully caught: " + e.getMessage());
            }


            Path tempFile = fm.createTemporaryFile("appData-", ".dat");
            System.err.println("\nCreated temporary file: " + tempFile);
            Files.writeString(tempFile, "Temporary content...");

            System.err.println("\nExample operations complete. Check the folders.");

        } catch (IOException e) {
            System.err.println("An I/O error occurred: " + e.getMessage());
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            System.err.println("Invalid argument: " + e.getMessage());
            e.printStackTrace();
        } catch (SecurityException e) {
            System.err.println("A security error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
